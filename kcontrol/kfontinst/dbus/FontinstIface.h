/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -m -p FontinstIface org.kde.fontinst.xml -i Family.h
 *
 * qdbusxml2cpp is Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef FONTINSTIFACE_H
#define FONTINSTIFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "Family.h"

/*
 * Proxy class for interface org.kde.fontinst
 */
class OrgKdeFontinstInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.fontinst"; }

public:
    OrgKdeFontinstInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~OrgKdeFontinstInterface();

public Q_SLOTS: // METHODS
    inline Q_NOREPLY void disable(const QString &family, uint style, bool inSystem, int pid, bool checkConfig)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(family) << qVariantFromValue(style) << qVariantFromValue(inSystem) << qVariantFromValue(pid) << qVariantFromValue(checkConfig);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("disable"), argumentList);
    }

    inline Q_NOREPLY void enable(const QString &family, uint style, bool inSystem, int pid, bool checkConfig)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(family) << qVariantFromValue(style) << qVariantFromValue(inSystem) << qVariantFromValue(pid) << qVariantFromValue(checkConfig);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("enable"), argumentList);
    }

    inline QDBusPendingReply<QString> folderName(bool sys)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(sys);
        return asyncCallWithArgumentList(QLatin1String("folderName"), argumentList);
    }

    inline Q_NOREPLY void install(const QString &file, bool createAfm, bool toSystem, int pid, bool checkConfig)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(file) << qVariantFromValue(createAfm) << qVariantFromValue(toSystem) << qVariantFromValue(pid) << qVariantFromValue(checkConfig);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("install"), argumentList);
    }

    inline Q_NOREPLY void list(int folders, int pid)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(folders) << qVariantFromValue(pid);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("list"), argumentList);
    }

    inline Q_NOREPLY void move(const QString &family, uint style, bool toSystem, int pid, bool checkConfig)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(family) << qVariantFromValue(style) << qVariantFromValue(toSystem) << qVariantFromValue(pid) << qVariantFromValue(checkConfig);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("move"), argumentList);
    }

    inline Q_NOREPLY void reconfigure(int pid, bool force)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(pid) << qVariantFromValue(force);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("reconfigure"), argumentList);
    }

    inline Q_NOREPLY void removeFile(const QString &family, uint style, const QString &file, bool fromSystem, int pid, bool checkConfig)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(family) << qVariantFromValue(style) << qVariantFromValue(file) << qVariantFromValue(fromSystem) << qVariantFromValue(pid) << qVariantFromValue(checkConfig);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("removeFile"), argumentList);
    }

    inline QDBusPendingReply<> saveDisabled()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("saveDisabled"), argumentList);
    }

    inline Q_NOREPLY void stat(const QString &name, int folders, int pid)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(name) << qVariantFromValue(folders) << qVariantFromValue(pid);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("stat"), argumentList);
    }

    inline Q_NOREPLY void uninstall(const QString &name, bool fromSystem, int pid, bool checkConfig)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(name) << qVariantFromValue(fromSystem) << qVariantFromValue(pid) << qVariantFromValue(checkConfig);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("uninstall"), argumentList);
    }

    inline Q_NOREPLY void uninstall(const QString &family, uint style, bool fromSystem, int pid, bool checkConfig)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(family) << qVariantFromValue(style) << qVariantFromValue(fromSystem) << qVariantFromValue(pid) << qVariantFromValue(checkConfig);
        callWithArgumentList(QDBus::NoBlock, QLatin1String("uninstall"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void fontList(int pid, const QList<KFI::Families> & families);
    void fontStat(int pid, const KFI::Family & family);
    void fontsAdded(const KFI::Families & families);
    void fontsRemoved(const KFI::Families & families);
    void status(int pid, int value);
};

namespace org {
  namespace kde {
    typedef ::OrgKdeFontinstInterface fontinst;
  }
}
#endif
